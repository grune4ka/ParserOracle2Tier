#########
##uc##

import java.sql.*;
import java.util.ArrayList;
import oracle.jdbc.internal.OracleTypes;

public class Uc {

	private final Step cst;

	public Uc(Connection c) {
		cst  = new Step(c);
	}

#########
##step##

import java.sql.*;
import java.util.ArrayList;
import oracle.jdbc.internal.OracleTypes;

public class Step {

	private final Connection connection;

	public Step(Connection c) {
		connection = c;
	}

#########
##stopAction##

        } catch (SQLException e) { lr.error_message("EXECUTE STATEMENT FAILED"); e.printStackTrace(); }

		return 0;
	}


	public int end() throws Throwable {
		return 0;
	}
}

#########
##startAction##

import lrapi.lr;
import java.sql.*;
import java.util.Locale;

public class Actions
{
	Connection connection = null;

	public int init() throws Throwable {
		
		String serverIp = lr.get_attrib_string("serverIp");
		String port = lr.get_attrib_string("port");
		String dbName = lr.get_attrib_string("dbName");
		String login = lr.get_attrib_string("login");
		String password = lr.get_attrib_string("password");
				
		Locale.setDefault(Locale.ENGLISH);
		try {			
			Class.forName("oracle.jdbc.driver.OracleDriver");
			connection = DriverManager.getConnection("jdbc:oracle:thin:@" + serveIp + port + dbName, login, password);
		}
		catch (ClassNotFoundException e) { lr.error_message("DRIVER NOT FOUND"); }
		catch (SQLException e) { lr.error_message("CONNECTION FAILED"); e.printStackTrace(); }
		return 0;
	}


	public int action() throws Throwable {

        try {

            Uc businessOperation = new Uc(connection);

#########
##fetch##
    
    }

	private ArrayList<ParamsFetch> fetchResultSet(ArrayList<ParamsFetch> arr_prm, ResultSet result) throws SQLException {
        
		if (result != null) {
			int count_column = result.getMetaData().getColumnCount();
			if (arr_prm == null)
				while (result.next()) 
					for (int i = 1; i <= count_column; i++) 
						result.getObject(i);
			else {			
				for (int row = 1; result.next(); row++) 
					for (int column = 1; column <= count_column; column++) { 
						Object tmp = result.getObject(row);
						for (ParamsFetch ref : arr_prm) {
							if (row == ref.X && column == ref.Y)                                                            
								ref.setValue((String)tmp);                                       
						}
					}
				return arr_prm;
			} 
		}		
		return null;
	}
	
	private ParamsFetch fetchResultSet(ParamsFetch prm, ResultSet result) throws SQLException {
		ArrayList<ParamsFetch> tmp;
                if (prm == null)
                    tmp = null;
                else {
                    tmp = new ArrayList<ParamsFetch>();
                    tmp.add(prm);
                    return fetchResultSet(tmp, result).get(0);
                }
		fetchResultSet(tmp, result);
		return null;
	}
	
	private ParamsFetch fetchResultSet(ResultSet result) throws SQLException {
		ParamsFetch tmp = null;		
		return fetchResultSet(tmp, result);
	}

	class ParamsFetch {
		public final String Name;
		public final int X;
		public final int Y;
		private String value = null;

		public ParamsFetch(String Name, int X, int Y) {
			this.Name = Name;
			this.X = X;
			this.Y = Y;
		}
		
		public String getValue() {
			return value;
		}
		
		public void setValue(String v) {
			value = v;
		}
	}		
}

#########
## ##