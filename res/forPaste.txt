#########
##uc##

public class Uc {

	private final Step cst;

	public Uc(Connection c) {
		cst  = new Step(c);
	}

#########
##step##

public class Step {

	private final Connection connection;

	public Step(Connection c) {
		connection = c;
	}

#########
##fetch##

    private HashMap<String, String> fetchResultSet(ArrayList<ParamsWithCoordinates> arr_prm, ResultSet result) throws SQLException {
        
        int count_column = result.getMetaData().getColumnCount();
        if (arr_prm == null)
            while (result.next()) 
                for (int i = 1; i <= count_column; i++) 
                    result.getObject(i);
        else {
            HashMap<String, String> returnValue = new HashMap<>();
            for (int row = 1; result.next(); row++) 
                for (int column = 1; column <= count_column; column++) { 
                    Object tmp = result.getObject(row);
                    for (ParamsWithCoordinates ref : arr_prm) {
                        if (row == ref.X && column == ref.Y)                                                            
                            returnValue.put(ref.Name, (String)tmp);                                       
                    }
                }
            return returnValue;
        }       
        return null;
    }

    class ParamsWithCoordinates {
        public final String Name;
        public final int X;
        public final int Y;

        public ParamsWithCoordinates(String Name, int X, int Y) {
            this.Name = Name;
            this.X = X;
            this.Y = Y;
        }

        public boolean chekXY(int x, int y) {
            return x == X && y == Y;
        }
    }
}

#########
## ##