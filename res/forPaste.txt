#########
##uc##

import java.sql.*;

public class Uc {

    private final Step cst;

    public Uc() {
        cst = new Step();
    }

#########
##step##

import lrapi.lr;
import java.sql.*;
import java.util.ArrayList;
import oracle.jdbc.internal.OracleTypes;

public class Step {

    private final ArrayList<Connection> pullConnections = new ArrayList<Connection>();

    public void newSession() throws SQLException { 
        try {
            pullConnections.add(DriverManager.getConnection("jdbc:oracle:thin:@" + 
                    lr.eval_string("{serverIp}") + 
                    lr.eval_string("{port}") + 
                    lr.eval_string("{dbName}"), 
                    lr.eval_string("{login}"), 
                    lr.eval_string("{password}")));
        }
        catch (SQLException e) { lr.error_message("CONNECTION FAILED"); throw e; }
    }

#########
##stopAction##

        } catch (SQLException e) { lr.error_message("EXECUTE STATEMENT FAILED"); e.printStackTrace(); }

        return 0;
    }


    public int end() throws Throwable {
        return 0;
    }
}

#########
##startAction##

import lrapi.lr;
import java.sql.*;
import java.util.Locale;

public class Actions
{
    public int init() throws Throwable {		
				
        Locale.setDefault(Locale.ENGLISH);

        lr.save_string(lr.get_attrib_string("serverIp"), "serverIp");
        lr.save_string(lr.get_attrib_string("port"), "port");
        lr.save_string(lr.get_attrib_string("dbName"), "dbName");
        lr.save_string(lr.get_attrib_string("login"), "login");
        lr.save_string(lr.get_attrib_string("password"), "password");

        try {
		
            Class.forName("oracle.jdbc.driver.OracleDriver");
        }
        catch (ClassNotFoundException e) { lr.error_message("SQL DRIVER NOT FOUND"); }
		
        return 0;
    }


    public int action() throws Throwable {

        try {

            Uc businessOperation = new Uc();

#########
##fetch##
    
    }

     private ParamsFetch fetchResultSet(ParamsFetch listPrm, ResultSet result) throws SQLException {
        
        if (result != null) {
            int count_column = result.getMetaData().getColumnCount();
            if (listPrm == null)
                while (result.next()) 
                    for (int i = 1; i <= count_column; i++) 
                        result.getObject(i);
            else {			
                for (int row = 1; result.next(); row++) 
                    for (int column = 1; column <= count_column; column++) { 
                        Object tmp = result.getObject(row);                        
                        for (ParamsFetch ref : listPrm) 
                            if (row == ref.X && column == ref.Y)                                                            
                                ref.setValue((String)tmp); 
                    }
                return listPrm;
            } 
        }		
        return null;
    }

    private class ParamsFetch implements Iterable<ParamsFetch> {
        public final String Name;
        public final int X;
        public final int Y;
        private ParamsFetch next = null;
        private String value = null;         

        public ParamsFetch(String Name, int X, int Y) {
            this.Name = Name;
            this.X = X;
            this.Y = Y;
        }
        
        public String getValue(String key) {
            ParamsFetch tmp = this;
            while (!tmp.Name.equals(key) && tmp.next != null)
                tmp = tmp.next;
            if (tmp.Name.equals(key))
                return tmp.value;
            return null;
        }
        
        public String getValue() {
            return value;
        }
		
        public void setValue(String key, String value) {
            ParamsFetch tmp = this;
            while (!tmp.Name.equals(key) && tmp.next != null)
                tmp = tmp.next;
            if (tmp.Name.equals(key)) 
                tmp.value = value;
        }      
        
        public void setValue(String val) {
            value = val;
        }
        
        public void add(String Name, int X, int Y) {
            ParamsFetch tmp = this;            
            while (tmp.next != null)                
                tmp = tmp.next;            
            tmp.next = new ParamsFetch(Name, X, Y);           
        }
        
        @Override
        public Iterator iterator() {
            return new iter();
        }
        
        private  class iter implements  Iterator<ParamsFetch> {           
            private ParamsFetch curr = ParamsFetch.this;

            @Override
            public boolean hasNext() {  
                return curr.next != null;
            }

            @Override
            public ParamsFetch next() { 
                return curr = curr.next;
            }          
        }
    } 
}

#########
## ##